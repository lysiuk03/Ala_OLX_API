// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OLX_Ala.Data;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(AlaOlxDbContext))]
    partial class AlaOlxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Data.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 7,
                            ContactName = "Dasha",
                            ImageURL = "https://i.pinimg.com/736x/63/ec/9b/63ec9b2eeb79eb6cbaf9d05c47a19a4c.jpg",
                            InStock = true,
                            Name = "Dog",
                            Phone = "+380674973625",
                            Price = 100m,
                            RegionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 7,
                            ContactName = "Masha",
                            ImageURL = "https://static.fundacion-affinity.org/cdn/farfuture/xFsdVk-9Vi8ifllknxGrwV-ul0WVSmjXl7DSObD4iLU/mtime:1644939075/sites/default/files/los-10-sonidos-principales-del-gato-fa.jpg",
                            InStock = true,
                            Name = "Cat",
                            Phone = "+380854763746",
                            Price = 80m,
                            RegionId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 9,
                            ContactName = "Roma",
                            ImageURL = "https://www.cnet.com/a/img/resize/0302d07e10ba8dc211f7b4e25891ad46dda31976/hub/2023/02/05/f52fdc98-dafc-4d05-b20e-8bd936b49a53/oneplus-11-review-cnet-lanxon-promo-8.jpg",
                            InStock = true,
                            Name = "Phone",
                            Phone = "+380857497463",
                            Price = 200m,
                            RegionId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            ContactName = "Misha",
                            ImageURL = "https://cdn.jdpower.com/Average%20Weight%20Of%20A%20Car.jpg",
                            InStock = true,
                            Name = "Car",
                            Phone = "+380654788473",
                            Price = 3000m,
                            RegionId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 12,
                            ContactName = "Elia",
                            ImageURL = "https://images.prom.ua/4137447034_w640_h640_muzhskoj-zimnij-svitshot.jpg",
                            InStock = true,
                            Name = "Nike",
                            Phone = "+380758497362",
                            Price = 250m,
                            RegionId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 12,
                            ContactName = "Boria",
                            ImageURL = "https://vintagewholesaleeurope.com/cdn/shop/products/image_8e7df972-8464-40bd-89b6-72b19fa2519b_1024x1024@2x.jpg",
                            InStock = true,
                            Name = "Carhartt",
                            Phone = "+380584763847",
                            Price = 300m,
                            RegionId = 6
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Help"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Children's world"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Real estate"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Car"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Spare parts"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Work"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Animals"
                        },
                        new
                        {
                            Id = 8,
                            Name = "House and garden"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Business and services"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Rent and hire"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Fashion and style"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hobbies, recreation and sports"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vinnitsa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Donetsk"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zhytomyr"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Luhansk"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Lutsk"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Mykolaiv"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Odesa"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Sumy"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Ternopil"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Uzhhorod"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Kherson"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Cherkasy"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Chernihiv"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Announcement", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Category", "category")
                        .WithMany("Announcements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.Region", "region")
                        .WithMany("Announcements")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Category", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Region", b =>
                {
                    b.Navigation("Announcements");
                });
#pragma warning restore 612, 618
        }
    }
}
